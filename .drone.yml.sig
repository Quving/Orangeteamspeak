eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CiAgICBidWlsZDoKICAgICAgICBpbWFnZTogZG9ja2VyOmxhdGVzdAogICAgICAgIGVudmlyb25tZW50OgogICAgICAgICAgICAtIERPQ0tFUl9IT1NUPXVuaXg6Ly8vdG1wL2hvc3Quc29jawogICAgICAgICAgICAjLSBET0NLRVJfQVVUSD0ke0RPQ0tFUl9BVVRIfQogICAgICAgIHZvbHVtZXM6CiAgICAgICAgICAgIC0gL3Zhci9ydW4vZG9ja2VyLnNvY2s6L3RtcC9ob3N0LnNvY2s6cncKICAgICAgICBwcml2aWxlZ2VkOiB0cnVlCiAgICAgICAgY29tbWFuZHM6CiAgICAgICAgICAgIC0gZG9ja2VyIGJ1aWxkIC10IHBpbmd1L29yYW5nZXRlYW1zcGVhazpsYXRlc3QgLgogICAgICAgICAgICAtIGVjaG8gJCRET0NLRVJfQVVUSAogICAgCgogICAgZG9ja2VyOgogICAgICAgIGltYWdlOiBwbHVnaW5zL2RvY2tlcgogICAgICAgIGVudmlyb25tZW50OgogICAgICAgICAgICAtIERPQ0tFUl9IT1NUPXVuaXg6Ly8vdG1wL2hvc3Quc29jawogICAgICAgIHZvbHVtZXM6CiAgICAgICAgICAgIC0gL3Zhci9ydW4vZG9ja2VyLnNvY2s6L3RtcC9ob3N0LnNvY2s6cncgICAgICAgCiAgICAgICAgcmVwbzogcGluZ3Uvb3JhbmdldGVhbXNwZWFrCiAgICAgICAgYXV0aDogJHtET0NLRVJfQVVUSH0KICAgICAgICB0YWdzOgogICAgICAgICAgICAtIGxhdGVzdAogICAgICAgIAogICAgICAgICAgICAKICBub3RpZnk6CiAgICBpbWFnZTogcGx1Z2lucy9zbGFjawogICAgd2ViaG9vazogJHtTTEFDS19XRUJIT09LfSAgICAKICAgIGNoYW5uZWw6IGRyb25lCiAgICB1c2VybmFtZTogZHJvbmUtY2kKICAgIHRlbXBsYXRlOiB8CiAgICAgICp7eyBidWlsZC5yZWYgfX0qICN7eyBidWlsZC5udW1iZXIgfX0gYnkgKnt7IGJ1aWxkLmF1dGhvciB9fSogZmluaXNoZWQgd2l0aCBhICp7eyB1cHBlcmNhc2UgYnVpbGQuc3RhdHVzIH19KiBpbiB7eyBzaW5jZSBidWlsZC5jcmVhdGVkIH19CiAgICAgICpDb21taXQqOiBfe3sgYnVpbGQuY29tbWl0IH19XwogICAgICAqQnJhbmNoKjogIF97eyBidWlsZC5icmFuY2ggfX1fCiAgICAgIHt7IGJ1aWxkLmxpbmsgfX0gCiAgICB3aGVuOgogICAgICBldmVudDogWyBwdXNoLCB0YWcsIGRlcGxveW1lbnQsIHB1bGxfcmVxdWVzdCBdCiAgICAgIHN0YXR1czogWyBzdWNjZXNzLCBmYWlsdXJlIF0.48qabQHvOJ5-XP2yK54--s4YFgLa7WYU1Xwq9Ktz5ao